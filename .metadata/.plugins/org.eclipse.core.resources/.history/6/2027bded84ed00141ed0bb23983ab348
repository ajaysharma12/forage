package com.forage.action;

import java.math.BigDecimal;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.forage.bean.CustomerBean;
import com.forage.dao.CustomerDAO;
import com.forage.exception.AlreadyExistException;
import com.forage.exception.NotFoundException;
import com.forage.json.CustomerJSON;
import com.forage.user.Utility;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.json.JSONConfiguration;

@Path("/customer")
public class CustomerAction {
	
	@PUT
	@Path("{phone}/{latitude}/{longitude}")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updateGPS(@PathParam("phone") String phoneNumber, 
							@PathParam("latitude") Double latitude, 
							@PathParam("longitude") Double longitude){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			throw new NotFoundException("updateGPS", "customer Phone " + phoneNumber +" not registered");
		}else{
			customer.setLastGPSLatitude(latitude);
			customer.setLastGPSLongitude(longitude);
			custDAO.updateGPSLocation(customer);
			customer = custDAO.getCustomer(phoneNumber);	
		}
		return CustomerJSON.constructStatus("updateGPS", "Success", customer);
	}
	
	
	@GET
	@Path("{id}")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String findById(@PathParam("id") BigDecimal customerId){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = null;
		customer = custDAO.getCustomer(customerId);
		return CustomerJSON.constructStatus("findById", "Success", customer);
	}
	
	
	@GET
	@Path("phone/{phone}")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String getCustomer(@PathParam("phone") String phoneNumber){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			throw new NotFoundException("getCustomer", "customer Phone " + phoneNumber +" not registered ");
		}
//		return Response.ok(CustomerJSON.construct(customer), MediaType.APPLICATION_JSON).build();
		return CustomerJSON.constructStatus("getDetails", "Success", customer);
	}
	
	
	@GET
	@Path("/getCustomerBean")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String getCustomerBean(@QueryParam("phone") String phoneNumber){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			throw new NotFoundException("getCustomerBean", "Phone " + phoneNumber +" not registered ");
		}
		return CustomerJSON.construct(customer);
	}
	
	
	
	@POST
	@Path("{phone}/{fname}/{lname}")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String addCustomer(@PathParam("phone") String phoneNumber, 
								@PathParam("fname") String firstName, 
								@PathParam("lname") String lastName){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() != null){
			throw new AlreadyExistException("addCustomer", "Phone is registered with Customer Id : " + customer.getCustomerId());
		}else{
			customer.setFirstName(firstName);
			customer.setLastName(lastName);
			customer.setPhoneNumber(phoneNumber);
			custDAO.insertNewCustomerNameNumber(customer);
			customer = custDAO.getCustomer(phoneNumber);	
		}
		return CustomerJSON.constructStatus("addCustomer", "Success", customer);
	}
	
	
	@PUT
	@Path("{phone}/email/{email}")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updateEmail(@PathParam("phone") String phoneNumber, 
							  @PathParam("email") String email){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("updateEmail", "No Customer Exists");
		}else{
			customer.setEmail(email);
			custDAO.updateEmail(customer);
			customer = custDAO.getCustomer(phoneNumber);	
		}
		return CustomerJSON.constructStatus("updateEmail", "Success", customer);
	}
	
	@PUT
	@Path("{phone}/name/{fname}/{lname}")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updateName(@PathParam("phone") String phoneNumber, 
							 @PathParam("fname") String firstName, 
							 @PathParam("lname") String lastName){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("updateName", "No Customer Exists");
		}else{
			customer.setFirstName(firstName);
			customer.setLastName(lastName);
			custDAO.updateName(customer);
			customer = custDAO.getCustomer(phoneNumber);	
		}
		return CustomerJSON.constructStatus("updateName", "Success", customer);
	}
	
	
	@PUT
	@Path("{phone}/addr/{addr}")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updateAddress(@PathParam("phone") String phoneNumber, 
								@PathParam("addr") BigDecimal addressId){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("updateAddress", "No Customer Exists");
		}else{
			customer.setAddress(addressId);
			custDAO.updateAddress(customer);
			customer = custDAO.getCustomer(phoneNumber);
		}
		return CustomerJSON.constructStatus("updateAddress", "Success", customer);
	}
	
	@GET
	@Path("{phone}/shipaddr/{addr}")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updateShipAddr(@QueryParam("phone") String phoneNumber, 
								@QueryParam("addressId") BigDecimal addressId){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("updateShipAddr", "No Customer Exists");
		}else{
			customer.setShippingAddress(addressId);
			custDAO.updateAddress(customer);
			customer = custDAO.getCustomer(phoneNumber);
		}
		return CustomerJSON.constructStatus("updateShipAddr", "Success", customer);
	}
	
	@GET
	@Path("/addShipAddr")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String addShipAddr(@QueryParam("phone") String phoneNumber, 
							 @QueryParam("addressId") BigDecimal addressId){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("addShipAddr", "No Customer Exists");
		}else{
			customer.setShippingAddress(addressId);
			custDAO.updateAddress(customer);
			customer = custDAO.getCustomer(phoneNumber);
		}
		return CustomerJSON.constructStatus("addShipAddr", "Success", customer);
	}
	
	
	@GET
	@Path("/updateFacebookId")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updateFacebookId(@QueryParam("phone") String phoneNumber, 
							 @QueryParam("facebookId") String facebookId){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("updateFacebookId", "No Customer Exists");
		}else{
			customer.setFacebookUniqueId(facebookId);
			custDAO.updateFacebookId(customer);
			customer = custDAO.getCustomer(phoneNumber);
		}
		return CustomerJSON.constructStatus("updateFacebookId", "Success", customer);
	}
	
	@GET
	@Path("/updateTwitterId")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updateTwitterId(@QueryParam("phone") String phoneNumber, 
							 @QueryParam("twitterId") String twitterId){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("updateTwitterId", "No Customer Exists");
		}else{
			customer.setTwitterUniqueId(twitterId);
			custDAO.updateFacebookId(customer);
			customer = custDAO.getCustomer(phoneNumber);
		}
		return CustomerJSON.constructStatus("updateTwitterId", "Success", customer);
	}
	
	@GET
	@Path("/updateGoogleId")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updateGoogleId(@QueryParam("phone") String phoneNumber, 
							 @QueryParam("googleId") String googleId){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("updateGoogleId", "No Customer Exists");
		}else{
			customer.setGoogleUniqueId(googleId);
			custDAO.updateGoogleId(customer);
			customer = custDAO.getCustomer(phoneNumber);
		}
		return CustomerJSON.constructStatus("updateGoogleId", "Success", customer);
	}
	
	
	@GET
	@Path("/updatePhoneNumber")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updatePhoneNumber(@QueryParam("old") String phoneNumber, 
							 @QueryParam("new") String newPhoneNumber){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("updatePhoneNumber", "No Customer Exists");
		}else{
			custDAO.updatePhoneNumber(customer, newPhoneNumber);			
			customer = custDAO.getCustomer(phoneNumber);
		}
		return CustomerJSON.constructStatus("updatePhoneNumber", "Success", customer);
	}
	
	
	@GET
	@Path("/updateLoginDate")  
	@Produces(MediaType.APPLICATION_JSON) 
	public String updateLoginDate(@QueryParam("phone") String phoneNumber){
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer(phoneNumber);
		if(customer.getCustomerId() == null){
			return Utility.constructActionStatus("updateLoginDate", "No Customer Exists");
		}else{
			custDAO.updateLoginDate(customer);
			customer = custDAO.getCustomer(phoneNumber);
		}
		return CustomerJSON.constructStatus("updateLoginDate", "Success", customer);
	}
	
	
	
	@POST
	@Path("/addCustomerJSON")  
	@Consumes(MediaType.APPLICATION_JSON) 
	@Produces(MediaType.APPLICATION_JSON)
	public String addCustomerJSON(CustomerBean customer){
		String custString = this.getCustomer(customer.getPhoneNumber());
		System.out.println("custString : " + custString);
		return CustomerJSON.constructStatus("addCustomerDetails", "Success", customer);
	}
	
	
	
	
	
	public static void main(String[] args) {
			
		// JERSEY CLIENT CODE //
		CustomerDAO custDAO = new CustomerDAO();
		CustomerBean customer = custDAO.getCustomer("9915088333");
		
		ClientConfig clientConfig = new DefaultClientConfig();
		clientConfig.getFeatures().put(JSONConfiguration.FEATURE_POJO_MAPPING, Boolean.TRUE);
		
		Client client = Client.create(clientConfig);
		WebResource webResource = client.resource("http://localhost:8080/userAccount/customer/addCustomerJSON");
		
		 ClientResponse response = webResource.accept("application/json")
				 .type("application/json").post(ClientResponse.class, customer);

		 if (response.getStatus() != 200) {
			 throw new RuntimeException("Failed : HTTP error code : "
					 + response.getStatus());
		 }
		 
		 String output = response.getEntity(String.class);
		 
		 System.out.println("Server response .... \n");
		 System.out.println(output);

		
		// JERSEY CLIENT CODE //
	}

}
